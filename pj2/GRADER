                                     GRADER

Name of student running submit: Romi Phadte
Login of student running submit: cs61b-mi

Second team member's name: Nicholas Sun
Second team member's login: cs61b-mg

Third team member's name (if any): Alec Spencer
Third team member's login: cs61b-hj

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?
Yes

Have you tested your program on the machines in the Soda CS 61B lab?
Yes

Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor?
Yes, with alpha-beta pruning. The default number of search levels is 3.

Describe your board evaluation function in some detail.
If the board is complete, it gives a score of +100 or -100, depending on if a win or loss occurs, respectively.
For unfinished boards, a score is given with the same range that is determined by counting the number of networks 
that contain an endzone and how long those networks are, and reduces the score based on how well the opposing side is doing,
as determined by the same criteria for the opponent.

Does your MachinePlayer use any special method of choosing the first few moves?
The MachinePlayer's first two moves are to place a chip at the center of each endzone.

Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces with be worth about 10% of your
grade.

================================================================================

CLASSES:
	list/DList.java
	list/DListNode.java
	player/Best.java
	player/Board.java
	player/Chip.java
	player/IllegalMoveException.java
	player/MachinePlayer.java
	player/Move.java
	player/Player.java
	
MODULES:
	I. AI - Contained in MachinePlayer, implemented by Romi Phadte.
		/*
         *this uses the Min max algorithm and some early game hardcoded moves
         *as a final complete strategy to win the game.
         *@param void
         *@return a valid Move 
         */ 
        public Move chooseMove() {

		
	II. Min-max - Contained in MachinePlayer, implemented by Romi Phadte.
        /*
        *bestmove calls itself recursively and uses all other modules to
        *determine the move that maximizes the value of the current game state
        *@param board 
            the current game state
         @param searchDepth
            number of recusive calls deep needed
         @alpha
            the alpha value for alpha-beta pruning
         @beta
            the beta value for alpha-beta pruning
         @color
            the color of the player who is doing moves in the bestmove function.
        */
		private Best bestMove(Board board, int searchDepth, int alpha, int beta, int color) {
		
	III. Evaluation - Contained in Board, implemented by Romi Phadte.
		/**
		* value() calls the two parameter value() and returns a score from -100 to 100 for the board. 100 is a win for "color".
		*
		*@param color
	 	*		The side who board values are being calculated for.
	 	*@return a score from -100 to 100.
	 	*/
		double value(int color) {
		
	IV. Find Moves - Contained in Board, Move, implemented by Romi Phadte.
		/**
	 	* validMoves() returns all moves available to a given color
	 	* 
	 	* @param color
	 	* 		The side whose valid moves are being calculated
	 	* @return a DList of all valid moves available to a color
	 	*/
		DList validMoves(int color) {
		
	V. Find Networks - Contained in Board, implemented by Nicholas Sun.
		/**
	 	* findNetworks() returns a DList of networks on the board for side "color", as determined by the game rules.
	 	* 
	 	* @param color
	 	* 		The side for which networks are being looked for
	 	* @return a DList of all networks (Not necessarily winning networks or 6 piece long networks).
	 	*/
		DList findNetworks(int color) {
		
		
		/**
	 	* isFinished() determines whether or not "color" has made a finished network
	 	* 
	 	* @param color
	 	* 		The side who is being checked for a successful network
	 	* @return true if a winning network has been made for "color", false otherwise
	 	*/
		boolean isFinished(int color) {
		
	VI. Is Valid - Contained in Board, implemented by Nicholas Sun.
		/**
	 	* isValid() returns true if move "m" for the given side "color" is valid.
	 	* 
	 	* @param color
	 	* 		The side for which a move is being made.
	 	* @param m
	 	* 		The move being considered
	 	* @return true if the move is valid for the given side, false otherwise.
	 	*/
		private boolean isValid(int color, Move m) {

