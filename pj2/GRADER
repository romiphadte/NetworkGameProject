                                     GRADER

Name of student running submit:
Login of student running submit:

Second team member's name:
Second team member's login:

Third team member's name (if any):
Third team member's login:

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?


Have you tested your program on the machines in the Soda CS 61B lab?


Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor?


Describe your board evaluation function in some detail.


Does your MachinePlayer use any special method of choosing the first few moves?


Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces with be worth about 10% of your
grade.

#######tis the redo#######
CLASSES
	Player
	MachinePlayer
	Board
	Chip

MODULES
#module name/classes/team member/describe each interface
AI:
	public class MachinePlayer
Min max:
	public Board(Board b, int color, Move m)
Scoring:

Find Moves:
Find Networks:
Is Valid:


#######REDO THIS STUFF FOLLOW THE FORMAT THEY PROVIDED#######
Player
  public Move chooseMove();
  public boolean opponentMove(Move m);
  public boolean forceMove(Move m);

  MachinePlayer
    protected Board gameboard;
    protected int color;
    protected int searchDepth;

    #makes a new MachinePlayer with variable search depth
    public MachinePlayer(int color);
    public MachinePlayer(int color, int searchDepth);
    public Move chooseMove();
    public boolean opponentMove(Move m);
    public boolean forceMove(Move m);
    
    #recursive function that gives the best move
    #given a limited search depth and a board
    private Move bestMove(Board board, int searchDepth);



Move
#may extend

#a game state
Board
  
  private Chip[][] gameboard;

  #makes a blank board
  public Board();

  #used for making new hypothetical boards
  public Board(Board b, int color, Move m);

  #used for changing the board
  public void makeMove(int color, Move m);

  #returns a score between (-100) - (100)
  #where 100 is a win for self
  public int value(int color);

  #win: 1
  #neutral: 0
  #loss: -1
  private int winner(int color);

  #gives all possible moves for given player
  public Move[] validMoves(int color);

  #returns true if Move for given player is valid
  public boolean isValid(int color, Move m);

  #moves chip to new location
  #removes c from all its connected to
  #adds a new chip at location x,y
  public void moveChip(int x, int y, Chip c);

Chip
	private int color;
	private int x;
	private int y;
	
	#all chips that its connected to
	public Chip[] networkedTo;

  #makes a chip with invalid info
  public Chip();
  
  #makes a chip with location x,y and color
  public Chip(int X, int Y, int Color);

  #returns x
  public int getX();

  #returns y
  public int getY();

  #returns color
  public int color();

  #removes all pointers to itself
  public void remove();
